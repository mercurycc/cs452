			   ==========================
			   Pinball System for TS-7200
			      Design Documentation
			   ==========================
				    cs452_08

1. Overview
===========

* Kernel
--------

- Added IRQ handling and Interrupt Manager
- Modified trap/context switch code to include IRQ states
- Implemented AwaitEvent syscall


* Userland
----------

- Added clock support
- Added time server and associated APIs, i.e. Time, Delay, DelayUntil


2. Kernel Component Changes Details
===================================

* AwaitEvent
------------

The prototype of AwaitEvent is:

int AwaitEvent( int eventid );

In Pinball kernel an event is defined as an interrupt.  An event id is simply
the interrupt id.  Therefore by definition only device drivers can call
AwaitEvent.

The AwaitEvent call will call into the interrupt manager to enable the
interrupt, register the current task as the interrupt handler for the interrupt,
and then the task will be removed from the scheduler.  When the interrupt is
triggered another call into the interrupt handler will disable the interrupt,
and return the interrupt handler task to be added back to the scheduler.

The caller is expected to ensure that the specific device in concern is
setup/reset properly to generate the expected interrupt.


* Data Structures
-----------------

- New data structure: Interrupt Manager Descriptor

The Interrupt Manager Descriptor contains data needed by the interrupt manager
to handle interrupts.  It contains the array of interrupt handlers, mapped to
interrupt by array index.

- Kernel context

The kernel context now contains data needed by the Interrupt Manager.


* Functional Units
------------------

- New functional unit: Interrupt Manager

The interrupt manager manages the interrupt handlers and handles generic
interrupt controler operations.

The interrupt manager starts up with initializing all the interrupts that are
going to be used by the kernel.  Intialization take place by disabling all
interrupts and filling out the vectored interrupt registers
(vic_vect_addr[0-15]).  The vectored interrupt registers are filled with the
interrupt id rather than an ISR, because the kernel handles the interrupt by
pushing the interrupt back to the user space and the only information needed by
the kernel is the interrupt id.  Using the vectored interrupt registers we can
obtain the interrupt id with one ld operation.  Fast.

The interrupt manager supports 2 methods provided to the kernel: register and
handle.  Both are supposed to be called by the trap handler.

Register registers a task as the interrupt handler for the specified interrupt,
and then enables the interrupt in the VIC.  The task is supposed to be removed
from the scheduler then.  Register should be called when a device driver calls
AwaitEvent.

Handle will return the interrupt handler for the specified interrupt so that the
handler can be rescheduled, and disables the interrupt.  Handle should be called
when the trap handler receives an interrupt.

Handle identifies the interrupt by reading the vic_vect_addr register.


* Processes
-----------

- New process: interrupt trap, and change to trap process

Interrupt will cause the processor to enter IRO mode.  In Pinball we do not
initialize IRQ mode sp, so IRQ does not have the power to save any information.
Rather, we modified the swi trap code to not to clobber any register, saves both
user mode registers and IRO mode registers (which are just lr and spsr), and
pass the spsr into the trap handler for it to recognize the source of interrupt.
In the interrupt trap code we simply executes swi to trap into kernel, through
swi trap code.

This implies that when the task is rescheduled, it will be restored into IRQ
mode along with all the IRQ registers.  The instruction immediately following
swi in the interrupt trap code is:

subs pc, lr, #4

which moves the processor back into the user program the IRQ interrupted.


3. Userland Components Changes Details
======================================

* New service: time server / clock server
--------------------------

The time server is an optimized clock server in the requirement of this assignment. The timer server is designed to have much small number of sends and/or replys. For this purpose, we removed the notifier, because the notifier would send message to clock server every clock tick.

In our time server, we will create a clock driver. When ever a request coming in, the time server will communicate with the clock driver to resolve the request. When a Time() request comes in, the clock driver will send a message to clock driver to ask for current time. When a Delay() or DelayUntil(), the timer server will calculate the wake-up time of the delaying task, and send this information to clock driver. The clock driver will send a signal to time server when a delay is done. Then time server will reply to the delaying task to wake it up.

One thing needs to mention is that the clock driver only reply once, for the task that needs to be wake up earliest. If there are multiple tasks delaying, the time server will calculate the new delaying time after receiving the signal from clock driver. Thus, the clock driver will notice the time server again when the delay time has come. To do this, the time server needs to keep a record of all tasks that has sent delay quest and has not been responsed to yet. These are stored with a minimum heap. We choose to use heap data structure because we can easily find the earliest task that the time server needs to reply to. 


* New driver: clock driver
--------------------------

The clock driver is built based on requirements of the time server.  It consists
of 2 components: one is the driver which configures the clock hardware, and the
other which is a interrupt handler which awaits interrupt events from the clock.
The clock driver support 2 operations: obtaining current time and count down.

The clock driver starts with initializing clock 1 and 3, where clock 1 is used
to generate count down interrupts and clock 3 is used to keep track with the
current time.  Then the driver creates the interrupt handler task.

Whenever the clock driver receives a current time request it reads clock 3 to
find out how long clock 3 has been running, and calculate the current time from
this data.  Clock 3 is a 32 bit clock which runs 24 days with the 2000Hz clock
source.

When the clock driver receives a count down request, it checks if there is a
undergoing count down and how much time the current count down has left.  If
there is no count down going on or the current count down has more time left
than the requested count down, the driver will reset the clock to generate an
interrupt after the requested count down, and if no count down is going on, the
driver notifies the clock interrupt handler to wait for the interrupt.
Otherwise the clock interrupt handler must have been waiting on a shorter count
down, and the count down request is discarded.

The reason that the longer count down request can be discarded (either by
ignoring a longer request or replacing current count down with a shorter
request) is due to the way time server is implemented.  The time server will
always restore the task that has least amount of delay.  Therefore the clock
server will only keep track the shortest count down.

Each tick is defined as 10 ms, which is 20 clock ticks giving 2000Hz clock
source.


* New user application: lazy dogs
---------------------------------

The lazy dog is a task that used to test the time server. All it does is the test procedure as described in the assignment specification. It creates 4 tasks, give different delay parameters, and wait until all 4 sub-tasks to finish. The sub tasks will delay for the given duration, and print message as they progress.

* Data Structures
-----------------

- Heap Structure

A new heap structure is added to user library. Each element in the heap is consist of two fields: a key and a value. The heap is a minimun heap sorting on the key of its elements. The heap has insert and remove methods of O(log n) running time, and the it has a peak method to read the first element in the heap for O(1) run time. The key value is an unsigned integer, and it will be sorted unsignedly. The value field is an integer value, so it can be used directly, or used as a pointer pointing to some data structure if needed. The maximum number of elements in the heap is set to 256 elements.


3. Source Code
==============



4. Output
=========